---
import { Tag, type RenderableTreeNodes } from "@markdoc/markdoc";
import Snippet from "./Snippet.svelte";

export type Component = (_props: any) => any;
export interface Props {
	content: RenderableTreeNodes;
	components?: Map<string, Component>;
}

const { content, components = new Map<string, Component>() } = Astro.props;

if (
	!Array.isArray(content) &&
	Tag.isTag(content) &&
	typeof content.name === "string" &&
	/[A-Z]/.test(content.name.charAt(0)) &&
	/-(astro|svelte)$/.test(content.name) &&
	!components.get(content.name)
)
	throw new Error(
		`${content.name} seems like a component, but no renderer was provided.
The component must satisfy the convention:- { "name-(astro|svelte)": Component }`
	);

const customComponent = components.get((content as Tag).name);

const nullishOrPrimitiveCheck = (node: RenderableTreeNodes) =>
	node === null || typeof node !== "object";

const escape = (text: string | number) => {
	const META_TEST_REGEX = /[<>"&]/;
	const META_CATCH_REGEX = /[<>"&]/g;
	const REPLACEMENTS = new Map<string, string>([
		["&", "&amp;"],
		["<", "&lt;"],
		[">", "&gt;"],
		['"', "&quot;"],
	]);

	return META_TEST_REGEX.test(`${text}`)
		? `${text}`.replace(META_CATCH_REGEX, (ch) => REPLACEMENTS.get(ch)!)
		: `${text}`;
};
---

{
	Array.isArray(content) ? (
		content.map((e) => <Astro.self content={e} components={components} />)
	) : typeof content === "string" || typeof content === "number" ? (
		<Fragment set:html={escape(content)} />
	) : nullishOrPrimitiveCheck(content) || !Tag.isTag(content) ? (
		<Fragment set:html={null} />
	) : typeof customComponent === "undefined" ? (
		<content.name {...content.attributes}>
			{Array.isArray(content.children) && (
				<Astro.self
					content={content.children}
					components={components}
				/>
			)}
		</content.name>
	) : content.name.includes("astro") ? (
		<customComponent children={content.children} {...content.attributes} />
	) : (
		<Snippet
			element={customComponent}
			children={content.children}
			{...content.attributes}
			client:visible
		/>
	)
}
