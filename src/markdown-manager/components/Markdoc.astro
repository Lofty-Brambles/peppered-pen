---
import { Tag, type RenderableTreeNodes } from "@markdoc/markdoc";
import Snippet from "./Snippet.svelte";

export type Component = (_props: any) => any;
export interface Props {
	content: RenderableTreeNodes;
	components?: Map<string, Component>;
}

const { content, components = new Map<string, Component>() } = Astro.props;

if (
	!Array.isArray(content) &&
	Tag.isTag(content) &&
	typeof content.name === "string" &&
	/[A-Z]/.test(content.name.charAt(0)) &&
	/-(astro|svelte)$/.test(content.name) &&
	!components.get(content.name)
)
	throw new Error(
		`${content.name} seems like a component, but no renderer was provided.
The component must satisfy the convention:- { "name-(astro|svelte)": Component }`
	);

// const getMarker = async () => {
// 	const theme = await loadTheme("../../../../../src/shiki/theme.json");
// 	const highlighter = await getHighlighter({ theme });
// 	highlighter.setColorReplacements(shikiConfig.replacementMap);
// 	return highlighter;
// };

// const marker = await getMarker();

const customComponent = components.get((content as Tag).name);

const nullishOrPrimitiveCheck = (node: RenderableTreeNodes) =>
	node === null || typeof node !== "object";

const escape = (text: string | number) => {
	const META_TEST_REGEX = /[<>"&]/;
	const META_CATCH_REGEX = /[<>"&]/g;
	const REPLACEMENTS = new Map<string, string>([
		["&", "&amp;"],
		["<", "&lt;"],
		[">", "&gt;"],
		['"', "&quot;"],
	]);

	return META_TEST_REGEX.test(`${text}`)
		? `${text}`.replace(META_CATCH_REGEX, (ch) => REPLACEMENTS.get(ch)!)
		: `${text}`;
};
---

{
	Array.isArray(content) ? (
		content.map((e) => <Astro.self content={e} components={components} />)
	) : typeof content === "string" || typeof content === "number" ? (
		<Fragment set:html={escape(content)} />
	) : nullishOrPrimitiveCheck(content) || !Tag.isTag(content) ? (
		<Fragment set:html={null} />
	) : typeof customComponent === "undefined" ? (
		<content.name {...content.attributes}>
			{Array.isArray(content.children) && (
				<Astro.self
					content={content.children}
					components={components}
				/>
			)}
		</content.name>
	) : content.name.includes("astro") ? (
		<customComponent children={content.children} {...content.attributes} />
	) : (
		<Snippet
			element={customComponent}
			children={content.children}
			{...content.attributes}
			client:visible
		/>
	)
}

<!-- <style lang="sass" is:global>
	:root
		--s-foreground: "#24292f"
		--s-background: "#ffffff"
		--s-highlight-bg: "#eaeef280"
		--s-editor-line: "#8c959f"
		--s-indent-bg: "#24292f1f"
		--s-indent-bg-active: "#24292f3d"
		--s-whitespace: "#afb8c1"
		--s-highlight-border: "#afb8c199"
		--s-bracket-bg: "#54aeff40"
		--s-bracket-border: "#54aeff99"
		--s-bracket-fg1: "#0550ae"
		--s-bracket-fg2: "#9a6700"
		--s-bracket-fg3: "#b35900"
		--s-bracket-fg4: "#8250df"
		--s-bracket-fg5: "#57606a"
		--s-comment: "#6e7781"
		--s-constant: "#b35900"
		--s-entity: "#0550ae"
		--s-export: "#8a4600"
		--s-params: "#24292f"
		--s-json-props: "#0550ae"
		--s-string: "#0a3069"
		--s-invalid: "#6f3800"
		--s-carriage: "#f6f8fa"
		--s-deleted: "#fff5e8"
		--s-inserted: "#ddf4ff"
		--s-changed: "#ffddb0"
		--s-ignored: "#eaeef2"

	html.dark
		--s-foreground: "#c9d1d9"
		--s-background: "#0d1117"
		--s-highlight-bg: "#6e76811a"
		--s-editor-line: "#6e7681"
		--s-indent-bg: "#c9d1d91f"
		--s-indent-bg-active: "#c9d1d93d"
		--s-whitespace: "#484f58"
		--s-highlight-border: "#6e768199"
		--s-bracket-bg: "#58a6ff40"
		--s-bracket-border: "#58a6ff99"
		--s-bracket-fg1: "#79c0ff"
		--s-bracket-fg2: "#e3b341"
		--s-bracket-fg3: "#fdac54"
		--s-bracket-fg4: "#d2a8ff"
		--s-bracket-fg5: "#8b949e"
		--s-comment: "#8b949e"
		--s-constant: "#ec8e2c"
		--s-entity: "#79c0ff"
		--s-export: "#fdac54"
		--s-params: "#c9d1d9"
		--s-json-props: "#a5d6ff"
		--s-string: "#a5d6ff"
		--s-invalid: "#fdac54"
		--s-carriage: "#f0f6fc"
		--s-deleted: "#331c04"
		--s-inserted: "#051d4d"
		--s-changed: "#4e2906"
		--s-ignored: "#161b22"
</style> -->
